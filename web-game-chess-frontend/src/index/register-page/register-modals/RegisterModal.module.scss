@import "../../Index.scss";

@mixin inputButton($size) {
  @include circle($size);
  @include flex();

  position: absolute;
  top: 0;
  right: 0;

  &:hover {
    cursor: pointer;

    &::after {
      display: block;
    }
  }

  &::after {
    @include rounded(0.4rem);
    @include subCl(fit-content, fit-content);

    display: none;
    content: "";
    left: 120%;
    color: #000;
    background-color: $gc1;
    font-size: 1.2rem;
  }

  svg.input-button-svg {
    height: 60%;
  }
}

// all modal styles
// register container form
.registration-form {
  @include flex(column, center, center, 1rem);

  position: relative;
  height: 100%;
  padding: 0 6rem;
  margin: 0 4rem;

  border-radius: 4rem;
  border: solid 1rem rgba($mc4, 0.5);
  background-color: $gc9;

  animation: formOpenAnimation 0.5s;

  .bg-svg {
    position: absolute;
    z-index: 0;
    bottom: 4rem;
    right: 4rem;
    height: 40rem;
    opacity: 0.02;
    pointer-events: none;

    transform: rotate(-10deg);
  }

  h2.form-title {
    font-size: 3.2rem;
    margin-bottom: 1rem;
  }

  .change-form {
    position: relative;
    z-index: 1;
    font-size: 1.4rem;
    color: $gc1;

    span {
      color: $mc5;
      text-decoration: underline;
      user-select: none;

      &:hover {
        cursor: pointer;
        color: $mc4;
      }
    }
  }

  // sing in / sign up inputs
  .inputs {
    @include flex(column, start, center, 1.6rem);

    margin-top: 2rem;

    .form-row {
      position: relative;
      z-index: 1;
      width: 100%;
      max-width: 26rem;

      .form-input {
        @include tInput(2rem);

        & {
          width: 100%;
          max-width: 26rem;
          padding-right: 4rem;
        }

        &:focus ~ .reg-pass-ind {
          opacity: 1;
        }

        &:focus ~ .arrow {
          opacity: 1;
        }

        &:focus ~ .paste {
          svg {
            fill: $gc0;
          }
        }

        &:focus ~ .send {
          path {
            stroke: $gc0;
          }
        }

        &:focus ~ .eye {
          path {
            stroke: $gc0;
          }
        }
      }

      input[type="number"]::-webkit-inner-spin-button,
      input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
      }

      @mixin resetInputButton() {
        & {
          // background-color: $gc6;
          border-radius: 0;
          top: unset;
          right: -1rem;
          bottom: 0;
          border-radius: 1rem;
          border-bottom-left-radius: 0;
        }
      }

      .send {
        @include inputButton(4rem);
        @include resetInputButton();

        &::after {
          content: "Send";
        }
      }

      .paste {
        @include inputButton(4rem);
        @include resetInputButton();

        &::after {
          content: "Paste";
        }
      }

      .eye {
        @include inputButton(4rem);
        @include resetInputButton();

        &::after {
          content: "Show";
        }
      }

      .err {
        &::placeholder {
          color: $danger-color-m;
        }
      }

      .arrow {
        position: absolute;
        height: 1.6rem;
        top: 50%;
        left: -2rem;
        transform: translateY(-50%) rotateY(180deg);
        opacity: 0;
      }

      .reg-pass-ind {
        @include circle(2rem);

        position: absolute;
        right: 0;
        opacity: 0;
      }
    }
  }
  //*/

  // verification modal elements
  .verify-text {
    font-size: 1.6rem;
    font-weight: 500;
    text-align: center;
  }

  .verify {
    @include flex(column, start, center, 1rem);

    position: relative;
    z-index: 1;
    margin: 2rem;

    span {
      font-size: 2rem;
      user-select: none;
    }

    .verify-con {
      position: relative;

      .verify-input {
        @include cInput(2.4rem, $gc0, $mc9);
        & {
          width: 18rem;
          text-align: start;
          letter-spacing: 0.5rem;
        }
      }

      input[type="number"]::-webkit-inner-spin-button,
      input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
      }

      .paste {
        @include inputButton(4.5rem);
      }
    }

    .resend {
      font-size: 1.4rem;
      color: $mc5;
      text-decoration: underline;

      &:hover {
        cursor: pointer;
        color: $mc4;
      }
    }
  }
  //*/

  // errors
  .error {
    span {
      font-size: 1.4rem;
      color: $danger-color-m;
    }
  }
  //*/

  // buttons
  button.registration-button {
    @include button(2rem);

    & {
      @include mainMButton();

      & {
        width: 100%;
        position: relative;
        position: relative;
        margin: 1rem;
        z-index: 1;
        padding: 1rem 0;
      }
    }
  }

  .cancel {
    font-size: 1.4rem;
    color: $danger-color-m;
    text-decoration: underline;

    &:hover {
      cursor: pointer;
      color: $danger-color-l;
    }
  }
  //*/

  @keyframes formOpenAnimation {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
}
//*/

// resize
@media (max-width: 700px) {
  .registration-form {
    gap: 2rem;

    h2.form-title {
      font-size: 4rem;
    }

    .change-form {
      font-size: 1.6rem;
    }

    .inputs {
      gap: 2rem;

      .form-row {
        .form-input {
          font-size: 2.4rem;
        }
      }
    }

    button.registration-button {
      font-size: 3rem;
    }
  }
}
//*/
